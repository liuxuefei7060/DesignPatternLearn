装饰模式
定义：动态地给对象添加一些额外的职责或者行为，装饰器模式相比于生成子类更为灵活





装饰器模式关注于在一个对象上动态的添加方法，然而代理模式关注于控制对对象的访问。
换句话说，用代理模式，代理类（proxy class）可以对它的客户隐藏一个对象的具体信息。
因此，当使用代理模式的时候，我们常常在一个代理类中创建一个对象的实例。并且，当我们
使用装饰器模式的时候，我们通常的做法是将原始对象作为一个参数传给装饰者的构造器。

我们可以用另外一句话来总结这些差别：使用代理模式，代理和真实对象之间的的关系通常在
编译时就已经确定了，而装饰者能够在运行时递归地被构造。



装饰模式，强调的是，不会实例化主体，自己在主体基础上，增加了新的东西，所谓“装饰”。
代理模式，强调的是，把主体对访问者（第三方）隐藏。根据代理的模式区别，有时候会实例化主体。
这两者很多地方行为其实都很像，主要区别还是在思想认定上。